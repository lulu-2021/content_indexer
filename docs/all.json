{"shell":true,"revision":"484770ae77fcde88e78cdda96c1f1c5c760b2521","objects":[{"type":null,"source":"lib/content_indexer.ex:2","object_type":"ModuleObject","moduledoc":"Documentation for ContentIndexer.\n","module":"Elixir.ContentIndexer","id":"ContentIndexer"},{"type":null,"source":"lib/index/index.ex:2","object_type":"ModuleObject","moduledoc":"  struct to store the details of what data is held in the index\n","module":"Elixir.ContentIndexer.Index","id":"ContentIndexer.Index"},{"type":null,"source":"lib/index/indexer.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n    Indexer is a Genserver that holds the index state - basically a list of index structs that have the filename, tokens and weights\n    Each time an index struct is added to the server/index the weightings are re-calculated. Since they are stored in memory the index searching is fast\n","module":"Elixir.ContentIndexer.Indexer","id":"ContentIndexer.Indexer"},{"type":null,"source":"lib/services/calculator.ex:6","object_type":"ModuleObject","moduledoc":"  ** Summary **\n    calculates the content_indexer weights for a document of tokens against a corpus of tokenized documents\n\n    https://en.wikipedia.org/wiki/Tf-idf\n\n    ** What is Tf-Idf **\n\n    tf–idf, short for term frequency–inverse document frequency, is a numerical statistic that is\n    intended to reflect how important a word is to a document in a collection or corpus. It is often\n    used as a weighting factor in information retrieval and text mining.\n\n    This library supports calculating large datasets in parallel using the Erlang OTP based server and actors\n\n    Currently the supported file types are plain-text, PDF and DOCX (xml)\n\n    ** Basic Useage **\n\n    Pass it a list of tokens and a corpus of tokens as a list of lists and it will return a list of tokens\n    with corresponding content_indexer weights based on the corpus of tokens\n\n    iex> ContentIndexerService.calculate_content_indexer_documents(\n      [\"bread\",\"butter\",\"jam\"],\n      [[\"red\",\"brown\",\"jam\"],[\"blue\",\"green\",\"butter\"],[\"pink\",\"green\",\"bread\",\"jam\"]]\n    )\n    {:ok, [bread: 0.3662040962227032, butter: 0.3662040962227032,jam: 0.3662040962227032]}\n\n","module":"Elixir.ContentIndexer.Services.Calculator","id":"ContentIndexer.Services.Calculator"},{"type":null,"source":"lib/services/list_checker_server.ex:2","object_type":"ModuleObject","moduledoc":"  ** Summary **\n    ListCheckerServer is the OTP server that uses Genserver to handle the\n    interactions with the individual workers and the parent caller\n    The ListCheckerWorkers each process a list of tokens\n    and checks that list for a given token. Once it is done a message is\n    returned to the ListCheckerServer.\n    The server in turn sends a message to the callee - advising it once the whole\n    list of token lists has been checked successfully!\n\n ** Basic Useage **\n\n The start method is called by a calling parent as well as the start_worker to spawn parallel processing\n  of a large number of token lists\n\n We pass it the size of the list of tokens for a running total and the PID of the calling parent process\n  to whom we pass the completed result back once done\n","module":"Elixir.ContentIndexer.Services.ListCheckerServer","id":"ContentIndexer.Services.ListCheckerServer"},{"type":null,"source":"lib/services/list_checker_worker.ex:2","object_type":"ModuleObject","moduledoc":"  genserver based approach to the ListCheckerWorker\n  ** Summary **\n    ListCheckerWorker is the OTP actor that handles the actual ContentIndexerService.list_contains to check\n    whether a given word is contained in a list of tokens\n\n   Due to the fact that we have a very large dataset - potentially millions - a process is spawned for each\n\n ** Basic Useage **\n\n  A method is called by the server for each list of tokens and returns a result based on whether\n  a given word was found in the list or not\n","module":"Elixir.ContentIndexer.Services.ListCheckerWorker","id":"ContentIndexer.Services.ListCheckerWorker"},{"type":null,"source":"lib/services/pre_process.ex:2","object_type":"ModuleObject","moduledoc":"  content and query pre-process functions that are passed to the SearchUtils.compile and SearchUtils.compile_query functions - here we are just some some extra stuf\n  with a markdown file - i.e. removing the header.\n\n  The import thing to note is that these two functions take in the content as a string and spit out a list of tokenized strings.\n\n  The steps we are taking:\n\n  (1) Remove all the stop words - they are noise and we should never search by them\n  (2) remove non-char data & white space\n\n  Using streams means most of the work will happen in a single step\n","module":"Elixir.ContentIndexer.Services.PreProcess","id":"ContentIndexer.Services.PreProcess"},{"type":null,"source":"lib/services/search_utils.ex:2","object_type":"ModuleObject","moduledoc":"  utility functions to crawl a folder with files and extract content - the actual processing of the content is handled\n  by the file_pre_process_func function that we are using from the ContentIndexer.Services.PreProcess module - however\n  this can easily be swapped out by passing your own pre-process\n","module":"Elixir.ContentIndexer.Services.SearchUtils","id":"ContentIndexer.Services.SearchUtils"},{"type":null,"source":"lib/services/simularity.ex:3","object_type":"ModuleObject","moduledoc":"** Summary **\n This module accepts a list of tuples which contain the document id and a hash of terms\n and and their TF_IDF weights, it also accepts query terms in the form of a hash of terms and\n weights, same format as in the tuple above.\n\n [\n   { 1, %{ \"abc\" => 0.001, \"term1\" => 0.123, \"term2\" => 0.934, \"term3\" => 0.945 } },\n   { 1, %{ \"abc\" => 0.001, \"term1\" => 0.123, \"term2\" => 0.934, \"term3\" => 0.945 } }…\n ]\n\n The module will compute the similarity of all the provided documents to the\n query terms. It will then return an ordered set of terms and their corresponding\n weights\n","module":"Elixir.ContentIndexer.Services.Similarity","id":"ContentIndexer.Services.Similarity"},{"type":"def","source":"lib/content_indexer.ex:8","signature":[["type",[],"Elixir"],["args",[],"Elixir"]],"object_type":"FunctionObject","name":"start","module_id":"ContentIndexer","id":"start/2","doc":null,"arity":2},{"type":"def","source":"lib/content_indexer.ex:5","signature":[["state",[],"Elixir"]],"object_type":"FunctionObject","name":"stop","module_id":"ContentIndexer","id":"stop/1","doc":false,"arity":1},{"type":"def","source":"lib/index/index.ex:10","signature":[["file_name",[],null],["tokens",[],null]],"object_type":"FunctionObject","name":"new","module_id":"ContentIndexer.Index","id":"new/2","doc":null,"arity":2},{"type":"def","source":"lib/index/indexer.ex:34","signature":[["file_name",[],null],["tokens",[],null]],"object_type":"FunctionObject","name":"add","module_id":"ContentIndexer.Indexer","id":"add/2","doc":null,"arity":2},{"type":"def","source":"lib/index/indexer.ex:30","signature":[],"object_type":"FunctionObject","name":"calculate","module_id":"ContentIndexer.Indexer","id":"calculate/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"ContentIndexer.Indexer","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"ContentIndexer.Indexer","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/index/indexer.ex:26","signature":[],"object_type":"FunctionObject","name":"corpus_of_tokens","module_id":"ContentIndexer.Indexer","id":"corpus_of_tokens/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:39","signature":[],"object_type":"FunctionObject","name":"documents","module_id":"ContentIndexer.Indexer","id":"documents/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"ContentIndexer.Indexer","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"ContentIndexer.Indexer","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"ContentIndexer.Indexer","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"ContentIndexer.Indexer","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/index/indexer.ex:19","signature":[],"object_type":"FunctionObject","name":"init_indexer","module_id":"ContentIndexer.Indexer","id":"init_indexer/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:47","signature":[],"object_type":"FunctionObject","name":"reset_index","module_id":"ContentIndexer.Indexer","id":"reset_index/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:43","signature":[],"object_type":"FunctionObject","name":"retrieve_index","module_id":"ContentIndexer.Indexer","id":"retrieve_index/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:11","signature":[],"object_type":"FunctionObject","name":"start_link","module_id":"ContentIndexer.Indexer","id":"start_link/0","doc":null,"arity":0},{"type":"def","source":"lib/index/indexer.ex:8","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"ContentIndexer.Indexer","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/services/calculator.ex:132","signature":[["tokens",[],null],["corpus_of_tokens",[],null]],"object_type":"FunctionObject","name":"calculate_content_indexer_documents","module_id":"ContentIndexer.Services.Calculator","id":"calculate_content_indexer_documents/2","doc":"  calculates the content_indexer weights for each token in the list of tokens against the corpus of tokens\n\n  iex> ContentIndexerService.calculate_content_indexer_documents(\n    [\"bread\",\"butter\",\"jam\"],\n    [[\"red\",\"brown\",\"jam\"],[\"blue\",\"green\",\"butter\"],[\"pink\",\"green\",\"bread\",\"jam\"]]\n  )\n  {:ok, [bread: 0.3662040962227032, butter: 0.3662040962227032,jam: 0.3662040962227032]}\n","arity":2},{"type":"def","source":"lib/services/calculator.ex:151","signature":[["tokens",[],null],["corpus_of_tokens",[],null],["corpus_size",[],null]],"object_type":"FunctionObject","name":"calculate_content_indexer_documents","module_id":"ContentIndexer.Services.Calculator","id":"calculate_content_indexer_documents/3","doc":null,"arity":3},{"type":"def","source":"lib/services/calculator.ex:109","signature":[["tokens",[],null]],"object_type":"FunctionObject","name":"calculate_content_indexer_query","module_id":"ContentIndexer.Services.Calculator","id":"calculate_content_indexer_query/1","doc":"  calculates the content_indexer weights for each token in the query - weights the query against itself\n\n  iex> ContentIndexerService.calculate_content_indexer_query(\n    [\"bread\",\"butter\",\"jam\"]\n  )\n  {:ok, [bread: 0.0, butter: 0.0, jam: 0.0]}\n","arity":1},{"type":"def","source":"lib/services/calculator.ex:94","signature":[["tokens",[],null]],"object_type":"FunctionObject","name":"calculate_tf_document","module_id":"ContentIndexer.Services.Calculator","id":"calculate_tf_document/1","doc":"  calculates the term frequency for each token in the list of tokens representing the document\n  and returns a list of the tokens with their respective term frequencies\n\n  iex> ContentIndexerService.calculate_tf_document([\"bread\",\"butter\",\"jam\",\"jam\",\"bread\",\"bread\"])\n  {:ok, [bread: 0.5, butter: 0.16666666666666666, jam: 0.3333333333333333]}\n","arity":1},{"type":"def","source":"lib/services/calculator.ex:79","signature":[["tokens",[],null]],"object_type":"FunctionObject","name":"calculate_token_count_document","module_id":"ContentIndexer.Services.Calculator","id":"calculate_token_count_document/1","doc":"  calculates the word count for each token in the list of tokens representing the document\n  and returns a list of the tokens with their respective word counts\n\n  iex> ContentIndexerService.calculate_token_count_document([\"bread\",\"butter\",\"jam\",\"jam\",\"bread\",\"bread\"])\n  {:ok, [bread: 3, butter: 1, jam: 2]}\n","arity":1},{"type":"def","source":"lib/services/calculator.ex:59","signature":[["content",[],null],["corpus",[],null]],"object_type":"FunctionObject","name":"calculate_tokens_againts_corpus","module_id":"ContentIndexer.Services.Calculator","id":"calculate_tokens_againts_corpus/2","doc":"  calculates the content_indexer\n\n  iex> ContentIndexerValidateService.calculate_tokens_againts_corpus(\n    \"bread,butter,jam\",\n    [\"red,brown,jam\",\"blue,green,butter\",\"pink,green,bread,jam\"]\n  )\n  {:ok,\n    [\n      {\"bread\", 0.13515503603605478},\n      {\"butter\", 0.13515503603605478},\n      {\"jam\", 0.0}\n    ]\n  }\n","arity":2},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"ContentIndexer.Services.Calculator","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"ContentIndexer.Services.Calculator","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"ContentIndexer.Services.Calculator","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"ContentIndexer.Services.Calculator","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"ContentIndexer.Services.Calculator","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"ContentIndexer.Services.Calculator","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/services/calculator.ex:43","signature":[],"object_type":"FunctionObject","name":"init_calculator","module_id":"ContentIndexer.Services.Calculator","id":"init_calculator/0","doc":null,"arity":0},{"type":"def","source":"lib/services/calculator.ex:200","signature":[["list",[],null],["item",[],null]],"object_type":"FunctionObject","name":"list_contains","module_id":"ContentIndexer.Services.Calculator","id":"list_contains/2","doc":null,"arity":2},{"type":"def","source":"lib/services/calculator.ex:35","signature":[],"object_type":"FunctionObject","name":"start_link","module_id":"ContentIndexer.Services.Calculator","id":"start_link/0","doc":null,"arity":0},{"type":"def","source":"lib/services/calculator.ex:2","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"ContentIndexer.Services.Calculator","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/services/calculator.ex:55","signature":[["count",[],null]],"object_type":"FunctionObject","name":"total","module_id":"ContentIndexer.Services.Calculator","id":"total/1","doc":null,"arity":1},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"ContentIndexer.Services.ListCheckerServer","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"ContentIndexer.Services.ListCheckerServer","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/services/list_checker_server.ex:70","signature":[["index",[],null],["count",[],null]],"object_type":"FunctionObject","name":"count","module_id":"ContentIndexer.Services.ListCheckerServer","id":"count/2","doc":null,"arity":2},{"type":"def","source":"lib/services/list_checker_server.ex:58","signature":[],"object_type":"FunctionObject","name":"current_state","module_id":"ContentIndexer.Services.ListCheckerServer","id":"current_state/0","doc":null,"arity":0},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"ContentIndexer.Services.ListCheckerServer","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"ContentIndexer.Services.ListCheckerServer","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"ContentIndexer.Services.ListCheckerServer","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"ContentIndexer.Services.ListCheckerServer","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/services/list_checker_server.ex:62","signature":[],"object_type":"FunctionObject","name":"init_server","module_id":"ContentIndexer.Services.ListCheckerServer","id":"init_server/0","doc":null,"arity":0},{"type":"def","source":"lib/services/list_checker_server.ex:66","signature":[["list_size",[],null],["parent_pid",[],null]],"object_type":"FunctionObject","name":"initialise_collection","module_id":"ContentIndexer.Services.ListCheckerServer","id":"initialise_collection/2","doc":null,"arity":2},{"type":"def","source":"lib/services/list_checker_server.ex:26","signature":[],"object_type":"FunctionObject","name":"start_link","module_id":"ContentIndexer.Services.ListCheckerServer","id":"start_link/0","doc":null,"arity":0},{"type":"def","source":"lib/services/list_checker_server.ex:20","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"ContentIndexer.Services.ListCheckerServer","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["arg",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"child_spec/1","doc":false,"arity":1},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/services/list_checker_worker.ex:45","signature":[],"object_type":"FunctionObject","name":"init_worker","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"init_worker/0","doc":null,"arity":0},{"type":"def","source":"lib/services/list_checker_worker.ex:49","signature":[["index",[],null],["word",[],null],["tokens",[],null]],"object_type":"FunctionObject","name":"list","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"list/3","doc":null,"arity":3},{"type":"def","source":"lib/services/list_checker_worker.ex:24","signature":[],"object_type":"FunctionObject","name":"start_link","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"start_link/0","doc":null,"arity":0},{"type":"def","source":"lib/services/list_checker_worker.ex:15","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"ContentIndexer.Services.ListCheckerWorker","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/services/pre_process.ex:25","signature":[["content",[],null],["file_name",[],null]],"object_type":"FunctionObject","name":"pre_process_content","module_id":"ContentIndexer.Services.PreProcess","id":"pre_process_content/2","doc":null,"arity":2},{"type":"def","source":"lib/services/pre_process.ex:18","signature":[["query",[],null]],"object_type":"FunctionObject","name":"pre_process_query","module_id":"ContentIndexer.Services.PreProcess","id":"pre_process_query/1","doc":null,"arity":1},{"type":"def","source":"lib/services/search_utils.ex:44","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"accum_list","module_id":"ContentIndexer.Services.SearchUtils","id":"accum_list/1","doc":null,"arity":1},{"type":"def","source":"lib/services/search_utils.ex:46","signature":[["list",[],"Elixir"],["acc",[],null]],"object_type":"FunctionObject","name":"accum_list","module_id":"ContentIndexer.Services.SearchUtils","id":"accum_list/2","doc":null,"arity":2},{"type":"def","source":"lib/services/search_utils.ex:36","signature":[["data_folder",[],null],["file_pre_process_func",[],null]],"object_type":"FunctionObject","name":"build_index","module_id":"ContentIndexer.Services.SearchUtils","id":"build_index/2","doc":null,"arity":2},{"type":"def","source":"lib/services/search_utils.ex:28","signature":[["query",[],null],["query_pre_process_func",[],null]],"object_type":"FunctionObject","name":"compile_query","module_id":"ContentIndexer.Services.SearchUtils","id":"compile_query/2","doc":null,"arity":2},{"type":"def","source":"lib/services/search_utils.ex:9","signature":[["data_folder",[],null],["file_pre_process_func",[],null]],"object_type":"FunctionObject","name":"crawl","module_id":"ContentIndexer.Services.SearchUtils","id":"crawl/2","doc":null,"arity":2},{"type":"def","source":"lib/services/search_utils.ex:17","signature":[["data_folder",[],null],["file_pre_process_func",[],null]],"object_type":"FunctionObject","name":"crawl_async","module_id":"ContentIndexer.Services.SearchUtils","id":"crawl_async/2","doc":null,"arity":2},{"type":"def","source":"lib/services/simularity.ex:19","signature":[["document_list",[],null],["query_terms",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"ContentIndexer.Services.Similarity","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/services/simularity.ex:35","signature":[["similarity_map",[],null]],"object_type":"FunctionObject","name":"get_filenames","module_id":"ContentIndexer.Services.Similarity","id":"get_filenames/1","doc":null,"arity":1},{"type":"def","source":"lib/services/simularity.ex:26","signature":[["document_list",[],null],["query_terms",[],null]],"object_type":"FunctionObject","name":"get_similarity","module_id":"ContentIndexer.Services.Similarity","id":"get_similarity/2","doc":null,"arity":2}],"language":"elixir","git_repo_url":"ssh://git@bitbucket.org/netflakes/content_indexer.git","client_version":"0.5.6","client_name":"inch_ex","branch_name":"master","args":[]}